Start by setting the onload property of window to an arrow function with no parameters. In the function, declare a container variable and assign it the value of getting the element by the id of "container".
window.onload = () => {
const container = document.getElementById("container")

Set the className of the label element to "label", and set the textContent to the name parameter.
label.className = "label";
label.textContent = name;

Finally, use the .appendChild() method to add your label element to the container element.
container.appendChild(label)

Declare an empty range function which takes a start and end parameter. Use the Array() constructor and implicitly return an empty array.
const range = (start,end) => Array()

Your array will need to be the size of the range. You can calculate this by finding the difference between end and start, and adding 1 to the result.
Pass this calculation as the argument for your Array() constructor.
const range = (start, end) => Array(end - start+1);

11/15/2024
Convert your start and end values in your range() call to numbers by using the .charCodeAt() method on them, passing the number 0 as the argument to that method.
const charRange = (start, end) => range(start.charCodeAt(0), end.charCodeAt(0));

Pass a callback function that takes code as the parameter and implicitly returns the value of passing code to the String.fromCharCode() method.
const charRange = (start, end) => range(start.charCodeAt(0), end.charCodeAt(0)).map((code) =>  String.fromCharCode(code));

Call range() with 1 and 99 as the arguments, and chain the .forEach() method. Pass the .forEach() method an empty callback which takes number as the parameter.
range(1,99).forEach((number) => ());

In your callback, you will need to make two function calls. Start by calling createLabel() and pass number as the argument. You should see some numbers appear in your spreadsheet.
Then call the .forEach() method on your letters array. Pass an empty callback function which takes a letter parameter.
createLabel(number);
letters.forEach(letter => {});
})

//Important for reduce() method, requires accumlator + element//
Declare a sum function that takes a nums parameter, which will be an array of numbers. It should return the result of calling reduce on the array to sum all of the numbers.
const sum = (nums) => nums.reduce((acc,el) => acc + el,0);

Declare an isEven function, which takes a num parameter and returns true if the number is even, and false otherwise. Use the modulo operator % to determine if a number is even or odd.
const isEven = num => num % 2 === 0; 

The average can be calculated by dividing the sum of all the numbers in the array by the length of the array. Remember that you have a sum function you can use.
const average = nums => sum(nums) / nums.length; 

Your next function will calculate the median value of an array of numbers. Start by declaring a median arrow function that takes a nums parameter.
In the function, declare a sorted variable and assign it the value of sorting a copy of the nums array.
You should use the slice() method for creating a shallow copy of the array.
const median = (nums) => {
const sorted = nums.slice().sort((a, b) => a - b);}

Using ternary syntax, check if length is even using your isEven function. If it is, return the average of the number at the middle index and the number after that. If it's odd, return the number at the middle index – you'll need to round the middle value up.
return isEven(length) ? average([sorted[middle], sorted[middle+1]])
: sorted[Math.ceil(middle)]

Because the change event is triggering on an input element, the element will have a value property that represents the current value of the input.
Assign the value property of element to a new variable called value, and use .replace() to remove all whitespace.
const value = element.value.replace(/\s/g, '')

16/11/2024
Now you need to check if the value does not include the id of the element. Create an if condition to do so.
if (!value.includes(element.id)) {
}

Use the && operator to add a second condition to your if statement that also checks if the first character of value is "=".
if (!value.includes(element.id) && value.startsWith("=")){
}

In your evalFormula, declare an idToText arrow function which takes an id parameter.
Your idToText function should return the result of calling .find() on the cells array with a callback function that takes an cell parameter and returns cell.id === id.
const idToText = (id) => cells.find(cell => cell.id === id);

Start by declaring a rangeRegex variable and assign it a regular expression that matches A through J (the range of columns in your spreadsheet). Use a capture group with a character class to achieve this
const rangeRegex = /([A-J])/

Add a capture group after your letter capture group. Your new capture group should match one or two digits – the first digit should be 1 through 9, and the second digit should be 0 through 9. The second digit should be optional.
const rangeRegex = /([A-J])([1-9][0-9]?)/;

Declare a rangeFromString arrow function that takes two parameters, num1 and num2. The function should implicitly return the result of calling range with num1 and num2 as arguments.
const rangeFromString = (num1,num2) => range(parseInt(num1), parseInt(num2));

11/17/2024

In your elemValue function, declare a function called inner which takes a character parameter.
Then, return your inner function.
const inner = (character) => {} return inner;

Use the same syntax as your addCharacters function to update your elemValue function. It should no longer declare inner, but should return the function implicitly.
const elemValue = num => character => idToText(character+num) ;

You can pass a function reference as a callback parameter. A function reference is a function name without the parentheses. For example:
Example Code
const myFunc = (val) => `value: ${val}`;
const array = [1, 2, 3];
const newArray = array.map(myFunc);
The .map() method here will call the myFunc function, passing the same arguments that a .map() callback takes. The first argument is the value of the array at the current iteration, so newArray would be [value: 1, value: 2, value: 3].
Pass a reference to your elemValue function as the callback to your .map() method.
const addCharacters = character1 => character2 => num => charRange(character1, character2).map(elemValue);

The second argument to the .replace() method does not have to be a string. You can instead pass a callback function to run more complex logic on the matched string.
The callback function takes a few parameters. The first is the matched string. Pass an empty callback function to your .replace() call, and give it a match parameter.
const rangeExpanded = x.replace(rangeRegex, (match) => {});

Give your callback function four more parameters to match those capture groups: char1, num1, char2, and num2. char will be short for character.
const rangeExpanded = x.replace(rangeRegex, (match,char1,num1,char2,num2) => {});

Declare a cellExpanded variable and assign it the value of calling .replace() on your rangeExpanded variable. Pass it your cellRegex and an empty callback function. The callback function should take a match parameter.
const cellExpanded = rangeExpanded.replace(cellRegex, (match) => {})

Update your callback function to return the result of calling idToText() with match as the argument. Remember that your regular expression is case-insensitive, so you will need to call toUpperCase() on match before passing it to idToText().
const cellExpanded = rangeExpanded.replace(cellRegex, match => idToText(match.toUpperCase());

Now that you have your infix functions, you need a way to evaluate them. Declare an infixEval function which takes two parameters, str and regex. It should implicitly return the .replace() method of str, with regex and an empty callback as the arguments.
const infixEval = (str,regex) => str.replace(regex , () => {});

infixToFunction[operator] returns a function. Call that function directly, passing arg1 and arg2 as the arguments.
const infixEval = (str, regex) => str.replace(regex, (_match, arg1, operator, arg2) => infixToFunction[operator](arg1,arg2))

Wrap each of your infixToFunction[operator] arguments in a parseFloat() call.
const infixEval = (str, regex) => str.replace(regex, (_match, arg1, operator, arg2) => infixToFunction[operator](parseFloat(arg1),parseFloat(arg2)))

In your highPrecedence function, declare a variable using const and assign it a regex that checks if the string passed to the str parameter matches the pattern of a number followed by a * or / operator followed by another number.
Your function should return a boolean value. Remember that you can use the test() method for this.
const regex = /([\d.]+)([*\/])([\d.]+)/;
return regex.test(str)


