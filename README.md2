Start by setting the onload property of window to an arrow function with no parameters. In the function, declare a container variable and assign it the value of getting the element by the id of "container".
window.onload = () => {
const container = document.getElementById("container")

Set the className of the label element to "label", and set the textContent to the name parameter.
label.className = "label";
label.textContent = name;

Finally, use the .appendChild() method to add your label element to the container element.
container.appendChild(label)

Declare an empty range function which takes a start and end parameter. Use the Array() constructor and implicitly return an empty array.
const range = (start,end) => Array()

Your array will need to be the size of the range. You can calculate this by finding the difference between end and start, and adding 1 to the result.
Pass this calculation as the argument for your Array() constructor.
const range = (start, end) => Array(end - start+1);

11/15/2024
Convert your start and end values in your range() call to numbers by using the .charCodeAt() method on them, passing the number 0 as the argument to that method.
const charRange = (start, end) => range(start.charCodeAt(0), end.charCodeAt(0));

Pass a callback function that takes code as the parameter and implicitly returns the value of passing code to the String.fromCharCode() method.
const charRange = (start, end) => range(start.charCodeAt(0), end.charCodeAt(0)).map((code) =>  String.fromCharCode(code));

Call range() with 1 and 99 as the arguments, and chain the .forEach() method. Pass the .forEach() method an empty callback which takes number as the parameter.
range(1,99).forEach((number) => ());

In your callback, you will need to make two function calls. Start by calling createLabel() and pass number as the argument. You should see some numbers appear in your spreadsheet.
Then call the .forEach() method on your letters array. Pass an empty callback function which takes a letter parameter.
createLabel(number);
letters.forEach(letter => {});
})

//Important for reduce() method, requires accumlator + element//
Declare a sum function that takes a nums parameter, which will be an array of numbers. It should return the result of calling reduce on the array to sum all of the numbers.
const sum = (nums) => nums.reduce((acc,el) => acc + el,0);

Declare an isEven function, which takes a num parameter and returns true if the number is even, and false otherwise. Use the modulo operator % to determine if a number is even or odd.
const isEven = num => num % 2 === 0; 

The average can be calculated by dividing the sum of all the numbers in the array by the length of the array. Remember that you have a sum function you can use.
const average = nums => sum(nums) / nums.length; 

Your next function will calculate the median value of an array of numbers. Start by declaring a median arrow function that takes a nums parameter.
In the function, declare a sorted variable and assign it the value of sorting a copy of the nums array.
You should use the slice() method for creating a shallow copy of the array.
const median = (nums) => {
const sorted = nums.slice().sort((a, b) => a - b);}

Using ternary syntax, check if length is even using your isEven function. If it is, return the average of the number at the middle index and the number after that. If it's odd, return the number at the middle index â€“ you'll need to round the middle value up.
return isEven(length) ? average([sorted[middle], sorted[middle+1]])
: sorted[Math.ceil(middle)]

Because the change event is triggering on an input element, the element will have a value property that represents the current value of the input.
Assign the value property of element to a new variable called value, and use .replace() to remove all whitespace.
const value = element.value.replace(/\s/g, '')




