The HTML and CSS have been provided for you. Feel free to explore them. When you are ready, you will need to set up your HTML variables. Get all of your .die elements and assign them to a listOfAllDice variable. Get your score inputs (the input elements in your #score-options) and score spans, and assign them to scoreInputs and scoreSpans. Assign the #current-round element to roundElement and the #current-round-rolls element to rollsElement, then do the same for your #total-score and #score-history elements. Assign your #roll-dice-btn, #keep-score-btn, #rules-btn, and .rules-container to variables with properly formatted names.
When the user clicks on the Show rules button, they should be able to toggle between showing and hiding the game rules. Create a variable isModalShowing to track the state of the game rules.
Each time the user rolls the dice, you will need to keep track of all of the dice values. Create a variable diceValuesArr to track this.
Throughout the game, you will need to keep track of the current score, total score, number of rolls and which round the player is on. Declare rolls, score, and round variables for this purpose.
Think about what the starting value of each of these variables should be. All of these variables should be able to be reassigned.

const listOfAllDice = document.querySelectorAll(".die");
const scoreInputs = document.querySelectorAll("#score-options input");
const scoreSpans = document.querySelectorAll("#score-options span");
const roundElement = document.getElementById("current-round");
const rollsElement = document.getElementById("current-round-rolls");
const totalScoreElement = document.getElementById("total-score");
const scoreHistory = document.getElementById("score-history");
const rollDiceBtn = document.getElementById("roll-dice-btn");
const keepScoreBtn = document.getElementById("keep-score-btn");
const rulesContainer = document.querySelector(".rules-container");
const rulesBtn = document.getElementById("rules-btn");

let diceValuesArr = [];
let isModalShowing = false;
let score = 0;
let round = 1; 
let rolls = 0; 

When the user clicks on the Show rules button, the rules for the game should display on the screen. When they click on the button again, the rules should be hidden.
Use an event listener to invert the value of the isModalShowing variable, toggle the visibility of the rulesContainer, and change the text of the rulesBtn to Show rules or Hide rules.
rulesBtn.addEventListener("click", () => {
  isModalShowing = !isModalShowing;

  if (isModalShowing) {
    rulesBtn.textContent = "Hide rules";
    rulesContainer.style.display = "block";
  } else {
    rulesBtn.textContent = "Show rules";
    rulesContainer.style.display = "none";
  }
});

When the user clicks on the Roll the dice button, five random die numbers should be generated and displayed on the screen.
Build out the logic such that clicking on the rollDiceBtn generates five random numbers between 1 and 6 inclusive, sets the diceValuesArr to contain only those five numbers, and displays the numbers in order in the listOfAllDice elements.
  rollDiceBtn.addEventListener("click" , () => {
   diceValuesArr = [];
  for(let i = 0; i < 5; i++) {
    const random = Math.floor(Math.random() * 6 + 1);
    diceValuesArr.push(random);
    listOfAllDice[i].textContent = random;
    }
});

For each round in the game, users are allowed to roll the dice a maximum of three times. If a user clicks the rollDiceBtn but has already made three rolls, the browser should show an alert() to indicate they must select a score - otherwise, it should roll the dice as it currently does and increment the rolls variable.
rollDiceBtn.addEventListener("click", () => {
  if (rolls === 3) {
    alert("You have made 3 rolls this round. Please select a score")
  } else {
    rolls++
  rollDice();
  }
});

You'll need to be able to update your rolls and your round on the page. Create an updateStats function to update the text of those two elements with the appropriate values. Then, call that function when your rollDiceBtn is clicked and the dice are rolled.
const updateStats = () => {
  rollsElement.textContent = rolls;
  roundElement.textContent = round;
};

rollDiceBtn.addEventListener("click", () => {
  if (rolls === 3) {
    alert("You have made three rolls this round. Please select a score.");
  } else {
    rolls++;
    rollDice();
    updateStats();
  }
});

Each time you roll the dice, you could end up with a Three of a kind, Four of a kind, Full house, Straight or a random combination of numbers. Based on the outcome, you can make a selection and add points to your score.
Start by creating a function called updateRadioOption that takes an index and a score value as arguments. It should set the scoreInputs at that index to be enabled, set the value of that input to the score, and display , score = ${score} in the correct scoreSpans element.
function updateRadioOption(index,score) {
  scoreInputs[index].disabled = false;
  scoreInputs[index].value =  score;
  scoreSpans[index].textContent = `, score = ${score}`;
}

If you roll the dice and get a Three of a kind or Four of a kind, then you can get a score totalling the sum of all five dice values. To calculate this, create a getHighestDuplicates function which takes an array of numbers. The function will need to count how many times each number is found in the array.
If a number appears four or more times, you will need to update the Four of a Kind option with your updateRadioOption function. If a number appears three or more times, you will need to update the Three of a Kind option. In both cases, the score value should be the sum of all five dice.
Regardless of the outcome, the final option should be updated with a score of 0. Make sure to call your getHighestDuplicates when the dice are rolled.
const getHighestDuplicates = array => {
  let duplicates = {};

  array.forEach(number => {
    duplicates[number] = (duplicates[number] || 0) + 1;
  });
  let maxCount = 0;
  let maxDuplicate
  let sum = array.reduce((sum,value) => sum + value, 0)

  for (const[duplicate,count] of Object.entries(duplicates)) {
    if (count > maxCount) {
      maxCount = count;
      maxDuplicate = duplicate;
    }
  }
  if (maxCount > 3) {
    updateRadioOption(1,sum)
  } 
  if (maxCount > 2) {
    updateRadioOption(0, sum)
  } 
  updateRadioOption(5,0)
}
 getHighestDuplicates(diceValuesArr);

Before each dice roll, you will need to reset the values for the score inputs and spans so a new value can be displayed.
Create a resetRadioOptions function. Your function should iterate through the scoreInputs to disable them and remove the checked attribute. Your function should also remove the text from each of the scoreSpans. Finally, call this function before you roll the dice.
const resetRadioOptions = () => {
  for (const input of scoreInputs) {
  input.disabled = true;
  input.checked = false;
} 
  for (const span of scoreSpans) {
    span.textContent = "";
  }
}
resetRadioOptions();

When you roll the dice and make a selection, you are not able to keep the score you selected and move onto the next round.
Create an updateScore function to add this functionality. Your function will need two parameters for the user selected score option. The first parameter will be passed the value of the radio button, remember this is a string, and the second parameter will be passed the id value of the radio button, which is the type of score they achieved.
The function will need to add the user selected value to the score, update the total score text on the page, and add a new li element to the score history ul element, using the format ${achieved} : ${selectedValue} for the li element content.
const updateScore = (selectedValue, achieved) => {
    score += parseInt(selectedValue, 10); 
    totalScoreElement.textContent = score;
    scoreHistory.innerHTML += `<li>${achieved} : ${selectedValue}</li>`;
};

After a user makes a selection, they should be able to keep that score and move onto the next round by clicking the keepScoreBtn.
When that button is clicked, you should find which radio option is checked and capture its value and id attributes. If the user has selected an option, call your functions to update the score, reset the radio options, and add the value and id to the score history.
If the user has not selected an option, display an alert informing them to do so.
keepScoreBtn.addEventListener("click", ()  => {
  let value
  let id

  for (const input of scoreInputs)
  if(input.checked) {
    value = input.value;
    id = input.id;
    break
  }
if (value) {
  rolls = 0;
  round++;
  updateStats();
  resetRadioOptions();
  updateScore(value,id);
} else {
  alert("Select a score")
}
});

At this point in the game, you are able to roll the dice, make a selection and play for a few rounds. However, you should notice that there is no end to the game and there are infinite rounds. According to the rules, there should be a total of six rounds and then the game ends with the final score.
After running your logic when the user selects a score, you should check if 6 rounds have been played. If so, display an alert with the user's final score after 500 milliseconds.
   if (round === 6) {
      setTimeout(() => {
        alert(`Final Score: ${score}`)
      }, 500)
    }

If you go through six rounds of the game, you should see the alert show up with your final score. But when you dismiss the alert, you are able to keep playing for more rounds past the original six. To fix this, you will need to reset the game.
Declare a resetGame function to do so. Reset all of the listOfAllDice elements to display 0, update score and rolls to be 0, update round to be 1, set the totalScoreElement text to the user's total score, clear the score history by setting it to an empty string, set the rollsElement text to the number of rolls, and set the roundElement text to the current round. Finally, reset all of the radio buttons to their initial states.
Call this function after displaying the alert with the final score.
const resetGame = () => {
  listOfAllDice.forEach(element => element.textContent = 0);

  score = 0;
  round = 1;
  rolls = 0;
  
  
  totalScoreElement.textContent = score;
  rollsElement.textContent = rolls;
  roundElement.textContent = round;

  resetRadioOptions();
};

If the user rolls three of one number, and two of another number, this is called a full house. Declare a detectFullHouse function that accepts a single argument. The function will be passed the diceValuesArr array when called.
Your detectFullHouse function should check if the user has rolled three of one number and two of another number. If so, it should update the third radio button to display a score of 25, with the correct attributes. Regardless, it should always update the last radio button to display a score of 0, with the correct attributes.
Don't forget to call your new function when the dice are rolled.
const detectFullHouse = (arr) => {
    const counts = {};

  for (const num of arr) {
    if (counts[num]) {
      counts[num]++;
    } else {
      counts[num] = 1;
    }
  }
  const values = Object.values(counts); 

  if(values.includes(3) && values.includes(2)){
    updateRadioOption(2, 25)
  } 
    updateRadioOption(5, 0);
}

